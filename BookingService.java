import java.sql.*;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

class BookingService {
    int booked;
    int total_seat;
    int avaible;
    double price;
    static String URL = "jdbc:mysql://localhost:3306/airline_management";
    static String USER = "root";
    static String PASSWORD = "";

    public boolean bookFlight(int userId, int flightId, int seatNumber, String flightClass, String food)
            throws Exception {
        String check = "select * ,type_of_seats.total_seat,type_of_seats.avaible,type_of_seats.price from flights inner join type_of_seats on flights.flight_id=type_of_seats.flight_id where flights.flight_id='"
                + flightId + "' and type_of_seats.category='" + flightClass + "'";
        String query = "INSERT INTO bookings (user_id, flight_id, no_seats,b_category, food,amount) VALUES (?, ?, ?, ?, ?,?)";
        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
        try {
            PreparedStatement stmt = conn.prepareStatement(query,
                    PreparedStatement.RETURN_GENERATED_KEYS);
            conn.setAutoCommit(false);
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(check);
            while (rs.next()) {
                total_seat = rs.getInt("total_seat");
                avaible = rs.getInt("avaible");
                price = rs.getDouble("price");

            }
            if (avaible == 0) {
                System.out.println("Sorry Flight is full");
                return false;
            } else if (seatNumber > avaible) {
                System.out.println("Sorry only " + (avaible) + " are avaible");
                return false;
            } else {
                stmt.setInt(1, userId);
                stmt.setInt(2, flightId);
                stmt.setInt(3, seatNumber);
                stmt.setString(4, flightClass);
                stmt.setString(5, food);
                stmt.setDouble(6, seatNumber * price);
                int rowsInserted = stmt.executeUpdate();
                ResultSet rs2 = stmt.getGeneratedKeys();
                int autoGeneratedID = 0;
                if (rs2.next()) {
                    autoGeneratedID = rs2.getInt(1); // Assuming the ID is in the first column
                }
                if (rowsInserted > 0) {
                    Statement st2 = conn.createStatement();
                    String query2 = "update type_of_seats set avaible ='" + (avaible -
                            seatNumber)
                            + "' where flight_id='" + flightId + "' and category='" + flightClass + "'";
                    if (st2.executeUpdate(query2) > 0) {
                        Scanner sc = new Scanner(System.in);
                        System.out.print("\t\tEnter 1 for payment \n\t\tEnter 2 for Cancle the booking process: ");
                        String input = sc.nextLine();
                        if (input.equals("1")) {
                            System.out.println("\t\tWait for payment processing");
                            Thread.sleep(2000);
                            System.out.print("\t\tMode of payment : \n\t\t1 For upi \n\t\t2 for credit card: ");
                            String mode = sc.nextLine();
                            if (mode.equals("1")) {
                                System.out.print("\t\tEnter the upi id: ");
                                String upi_id = sc.nextLine();
                                System.out.print("\t\tEnter the pin: ");
                                String pin = sc.nextLine();
                                System.out.println("\t\tWait payment is processing....");
                                Thread.sleep(2000);
                                String p_quer = "insert into payment (user_id,paymentdetails,amount,book_id,p_MOP) values(?,?,?,?,?)";
                                PreparedStatement pstmt = conn.prepareStatement(p_quer);
                                pstmt.setInt(1, userId);
                                pstmt.setString(2, upi_id);
                                pstmt.setDouble(3, seatNumber * price);
                                pstmt.setInt(4, autoGeneratedID);
                                pstmt.setString(5, "upi");
                                if (pstmt.executeUpdate() > 0) {
                                    conn.commit();
                                    new BoardingPassService().generateBoardingPass(userId, autoGeneratedID);
                                } else {
                                    return false;
                                }

                            } else if (mode.equals("2")) {
                                System.out.print("\t\tEnter the card_number: ");
                                String upi_id = sc.nextLine();
                                System.out.print("\t\tEnter the cvv Number: ");
                                String pin = sc.nextLine();
                                System.out.println("\t\tWait payment is processing....");
                                Thread.sleep(2000);
                                String p_quer = "insert into payment (user_id,paymentdetails,amount,book_id,p_MOP) values(?,?,?,?,?)";
                                PreparedStatement pstmt = conn.prepareStatement(p_quer);
                                pstmt.setInt(1, userId);
                                pstmt.setString(2, upi_id);
                                pstmt.setDouble(3, seatNumber * price);
                                pstmt.setInt(4, autoGeneratedID);
                                pstmt.setString(5, "Credit-card");
                                if (pstmt.executeUpdate() > 0) {
                                    conn.commit();
                                    new BoardingPassService().generateBoardingPass(userId, autoGeneratedID);
                                } else {
                                    return false;
                                }

                            } else {
                                return false;
                            }

                        } else {
                            return false;
                        }

                        ;

                    }
                }
                return true;
            }

        } catch (SQLException e) {
            // System.out.println(e.getMessage());
            conn.rollback();
            e.printStackTrace();
            return false;
        }
    }

    public boolean cancelFlight(int bookingId) throws Exception {
        String query = "DELETE FROM bookings WHERE b_id = ?";
        String updateBookedSeatsQuery = "UPDATE type_of_seats SET avaible = avaible + ? WHERE flight_id =? and category=? ";
        String getSeatNumberQuery = "SELECT * FROM bookings WHERE b_id = ?";
        String deletepayment = "delete from payment where book_id=?";
        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
        try {
            // Get the seat number, flight_id, and user_id associated with the bookingId
            conn.setAutoCommit(false);
            PreparedStatement getSeatStmt = conn.prepareStatement(getSeatNumberQuery);
            getSeatStmt.setInt(1, bookingId);
            ResultSet rs = getSeatStmt.executeQuery();
            int seatNumber = 0;
            int flightId = 0;
            int userId = 0;
            double amount = 0;
            String clas = "";
            if (rs.next()) {
                seatNumber = rs.getInt("no_seats");
                flightId = rs.getInt("flight_id");
                userId = rs.getInt("user_id");
                amount = rs.getDouble("amount");
                clas = rs.getString("b_category");

            } else {
                System.out.println("\t\tBooking not found");
                return false;
            }

            // Confirmation step
            Scanner sc = new Scanner(System.in);
            System.out.print("\t\tAre you sure you want to cancel the booking? (yes/no): ");
            String confirmation = sc.nextLine();

            if (!confirmation.equalsIgnoreCase("yes")) {
                System.out.println("\t\tBooking cancellation aborted.");
                return false;
            }

            // Delete the booking record
            PreparedStatement deleteStmt = conn.prepareStatement(query);
            deleteStmt.setInt(1, bookingId);
            PreparedStatement deletepaymwent = conn.prepareStatement(deletepayment);
            deletepaymwent.setInt(1, bookingId);
            deletepaymwent.executeUpdate();
            int rowsDeleted = deleteStmt.executeUpdate();

            if (rowsDeleted > 0) {
                // Update the booked seats count in the flights table
                PreparedStatement updateBookedStmt = conn.prepareStatement(updateBookedSeatsQuery);
                updateBookedStmt.setInt(1, seatNumber);
                updateBookedStmt.setInt(2, flightId);
                updateBookedStmt.setString(3, clas);
                int rowsUpdated = updateBookedStmt.executeUpdate();
                if (rowsUpdated > 0) {

                    conn.commit();
                    System.out.println("\t\tBooking canceled successfully and seat count updated.");

                    new BoardingPassService().generateCancellationTicket(userId, flightId, seatNumber, amount);
                    return true;
                } else {
                    conn.rollback();
                    System.out.println("\t\tFailed to update booked seats.");
                    return false;
                }
            } else {
                conn.rollback();
                System.out.println("\t\tFailed to cancel booking.");
                return false;
            }
        } catch (SQLException e) {
            conn.rollback();
            System.out.println(e.getMessage());
            return false;
        } finally {
            // conn.setAutoCommit(true);
            conn.close();
        }
    }
}

class BoardingPassService {
    public static String URL = "jdbc:mysql://localhost:3306/airline_management";
    public static String USER = "root";
    public static String PASSWORD = "";

    public void generateBoardingPass(int userId, int book_id) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(URL, USER, PASSWORD);

            // Query to fetch booking details
            String query = "SELECT b.flight_id, b.no_seats,b.amount, b.b_category, b.food, f.departure_time, f.arrival_time "
                    +
                    "FROM bookings b " +
                    "JOIN flights f ON b.flight_id = f.flight_id " +
                    "WHERE b.user_id = ? order by b.b_id desc limit 1 ";

            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setInt(1, userId);

            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                int flightId = rs.getInt("flight_id");
                int seatNumber = rs.getInt("no_seats");
                String flightClass = rs.getString("b_category");
                String food = rs.getString("food");
                String departureTime = rs.getString("departure_time");
                String arrivalTime = rs.getString("arrival_time");
                double amount = rs.getDouble("amount");

                // Generate current timestamp
                LocalDateTime now = LocalDateTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                String formattedNow = now.format(formatter);

                // Generate the boarding pass details
                System.out.println("----------------------------------------------------------------------------");
                String boardingPass = "\t\tChak De India Airline\n" +
                        "\t\tBoarding Pass\n" +
                        "\t\t--------------------\n" + "\t\tBooking ID: " + book_id + "\n" +
                        "\t\tUser ID: " + userId + "\n" +
                        "\t\tFlight ID: " + flightId + "\n" +
                        "\t\tSeat Number: " + seatNumber + "\n" +
                        "\t\tClass: " + flightClass + "\n" +
                        "\t\tFood Preference: " + food + "\n" +
                        "\t\tDeparture Time: " + departureTime + "\n" +
                        "\t\tArrival Time: " + arrivalTime + "\n" +
                        "\t\tBooking Time: " + formattedNow + "\n" + "\t\tTotal Amount : " + amount + "\n" +
                        "\t\tStatus: Confirmed\n";
                System.out.println("--------------------------------------------------------------------------");

                System.out.println(boardingPass);

                try {
                    FileWriter fileWriter = new FileWriter(
                            "D://BoardingPass_User" + userId + "_Flight" + flightId + ".txt");
                    fileWriter.write(boardingPass);
                    fileWriter.close();
                    System.out.println("\t\tBoarding pass has been saved to your D drive.");
                } catch (IOException e) {
                    System.out.println("\t\tAn error occurred while saving the boarding pass to file.");
                    e.printStackTrace();
                }
            } else {
                System.out.println("\t\tNo booking found for the given user ID.");
            }

        } catch (SQLException e) {
            System.out.println("\t\tDatabase error: " + e.getMessage());
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    System.out.println("\t\tError closing connection: " + e.getMessage());
                }
            }
        }
    }

    public void generateCancellationTicket(int userId, int flightId, int seatNumber, double amount) {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedNow = now.format(formatter);

        System.out.println("-----------------------------------------------------------------------------------------");
        String cancellationTicket = "\t\tChak De India Airline\n" +
                "\t\tCancellation Ticket\n" +
                "\t\t--------------------\n" +
                "\t\tUser ID: " + userId + "\n" +
                "\t\tFlight ID: " + flightId + "\n" +
                "\t\tSeat Number: " + seatNumber + "\n" +
                "\t\tCancellation Time: " + formattedNow + "\n" +
                "\t\tCancellation amount : " + amount + "\n" +
                "\t\tStatus: Canceled\n";

        System.out.println(cancellationTicket);

        try {
            FileWriter fileWriter = new FileWriter(
                    "D://CancellationTicket_User" + userId + "_Flight" + flightId + ".txt");
            System.out.println("\t\tCancellation Tickets has been saved to your D drive.");

            fileWriter.write(cancellationTicket);
            fileWriter.close();
        } catch (IOException e) {
            System.out.println("\t\tAn error occurred while saving the cancellation ticket to file.");
            e.printStackTrace();
        }
    }
}
